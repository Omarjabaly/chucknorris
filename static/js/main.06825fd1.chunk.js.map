{"version":3,"sources":["components/Button.js","components/ButtonList.js","components/ChuckQuote.js","containers/App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","getTheQuote","subject","className","ButtonList","getChuckQuote","ChuckQuote","chuckQuoteToDisp","topic","App","getQuote","console","log","setState","fetch","then","respQuote","json","dispQuote","chuckQuote","value","state","window","scrollTo","style","fontFamily","color","this","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOAeeA,G,YAbA,SAACC,GAEf,OAEC,6BACC,wBAAIC,QAAS,WAAOD,EAAME,YAAYF,EAAMG,UAAWC,UAAY,mEACjEJ,EAAMG,YC8BIE,EAjCI,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEpB,OAEC,yBAAKF,UAAY,2CAEhB,kBAAC,EAAD,CAAQF,YAAeI,EAAeH,QAAQ,WAC9C,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,WAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,cAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,QAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,aAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,YAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,SAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,YAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,UAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,UAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,UAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,cAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,aAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,YAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,UAChD,kBAAC,EAAD,CAAQD,YAAeI,EAAeH,QAAU,aCNpCI,EAlBI,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,iBAAkBC,EAAW,EAAXA,MAEtC,OAEC,6BAASL,UAAU,mCACjB,wBAAIA,UAAU,sCAAsCK,EAApD,UACA,yBAAKL,UAAU,UACb,uBAAGA,UAAU,gCACVI,MCuCME,E,kDAvCd,aAAe,IAAD,8BACb,gBAMAC,SAAW,SAACR,GACVS,QAAQC,IAAIV,GACZ,EAAKW,SAAS,CAAEL,MAAON,IACtBY,MAAM,oDAAD,OAAqDZ,IACzDa,MAAK,SAAAC,GAAS,OAAIA,EAAUC,UAC5BF,MAAK,SAAAG,GAAe,EAAKL,SAAS,CAACM,WAAYD,EAAUE,YAV7D,EAAKC,MAAQ,CACZb,MAAO,GACPW,WAAY,IAJA,E,gEAgBPG,OAAOC,SAAS,EAAG,K,+BAKvB,OAEE,yBAAKpB,UAAU,KAAKqB,MAAO,CAAEC,WAAY,kBAEvC,wBAAID,MAAS,CAAEE,MAAO,YAAtB,qCACA,kBAAC,EAAD,CAAYnB,iBAAkBoB,KAAKN,MAAMF,WAAYX,MAAOmB,KAAKN,MAAMb,QACvE,uBAAGL,UAAY,KAAKqB,MAAS,CAAEE,MAAO,UAAtC,qBACA,kBAAC,EAAD,CAAYrB,cAAesB,KAAKjB,gB,GA9BtBkB,aCIEC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.06825fd1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = (props) => {\r\n\t\r\n\treturn (\r\n\r\n\t\t<div>\r\n\t\t\t<h1 onClick={() => {props.getTheQuote(props.subject)}} className = 'w4 ma3 f4 link br3 ba bw1 ph3 pv2 mb2 dib mid-gray grow pointer'> \r\n\t\t\t\t{props.subject} \r\n\t\t\t</h1>\r\n\t\t</div>\r\n\t\r\n\t);\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from './Button';\r\n\r\n\r\n\r\nconst ButtonList = ({getChuckQuote}) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div className = 'pv3 flex justify-center flex-wrap w-100'>\r\n\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject=\"animal\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"career\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"celebrity\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"dev\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"explicit\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"fashion\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"food\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"history\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"money\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"movie\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"music\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"political\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"religion\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"science\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"sport\" />\r\n\t\t\t<Button getTheQuote = {getChuckQuote} subject = \"travel\" />\r\n\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default ButtonList;\r\n","import React from 'react';\r\n\r\nconst ChuckQuote = ({chuckQuoteToDisp, topic}) => {\r\n\r\n\treturn (\r\n\r\n\t\t<article className=\"center mw5 mw6-ns hidden ba mv4\">\r\n\t\t  <h1 className=\"f4 bg-near-black white mv0 pv2 ph3\">{topic} quote</h1>\r\n\t\t  <div className=\"pa3 bt\">\r\n\t\t    <p className=\"f6 f5-ns lh-copy measure mv0\">\r\n\t\t      {chuckQuoteToDisp}\r\n\t\t    </p>\r\n\t\t  </div>\r\n\t\t</article>\r\n\r\n\t);\r\n\r\n}\r\n\r\n\r\nexport default ChuckQuote;\r\n","\nimport React, { Component } from 'react';\nimport 'tachyons';\nimport './App.css';\nimport ButtonList from '../components/ButtonList';\nimport ChuckQuote from '../components/ChuckQuote';\n\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ttopic: '',\n\t\t\tchuckQuote: ''};\n\t}\n\n  getQuote = (subject) => {\n    console.log(subject);\n    this.setState({ topic: subject });\n     fetch(`https://api.chucknorris.io/jokes/random?category=${subject}`)\n     .then(respQuote => respQuote.json())\n     .then(dispQuote => { this.setState({chuckQuote: dispQuote.value} ) })\n  }\n\n  componentDidMount() {\n        window.scrollTo(0, 0)\n  }\n\n  render() {\n\n    return (\n\n      <div className='tc' style={{ fontFamily: 'ComicHelvetic'}}>\n\n        <h1 style = {{ color: '#FFC300' }}> The Best of Chuck Norris Quotes </h1>\n        <ChuckQuote chuckQuoteToDisp={this.state.chuckQuote} topic={this.state.topic} />\n        <p className = 'f3' style = {{ color: 'black' }}> choose category </p>\n        <ButtonList getChuckQuote={this.getQuote} />\n      </div>\n\n      );\n  \n  }\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}